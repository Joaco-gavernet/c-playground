#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define forn(i, n) for (i = 0; i < n; i++)
#define DIMF 4

typedef struct
{                       // size 8 bits = 1 byte
  unsigned int num : 4; // 4 (decimal) ===> 0100 (binario)
  unsigned int palo : 2;
  unsigned int color : 2; // con 1 bit bastaba
} carta;

void imprimirCarta(carta c)
{
  static const char recuperarNumero[] = {' ', 'A', '2', '3', '4', '5', '6', '7', '8', '9', 'J', 'Q', 'K'}; // char * = cadena de caracteres (string)
  static const char *recuperarPalo[] = {"Corazon", "Diamante", "Trebol", "Pica"};
  static const char *recuperarColor[] = {"Rojo", "Negro"};

  printf("CARTA --> num: %2u    palo: %2u     color: %2u \n", c.num, c.palo, c.color);
}

void imprimirMazo(carta mazo[], const int diml)
{
  int i;
  forn(i, diml)
  {
    imprimirCarta(mazo[i]);
  }
}

void llenarMazo(carta mazo[], const int diml)
{
  int k;
  for (k = 0; k < diml; k++)
  {
    mazo[k].num = (k % 12) + 1;
    mazo[k].palo = (k % 4);
    mazo[k].color = (k % 2);
  }
}

void swapCartas (carta *mazo, int a, int b) {
    carta aux = {};
    aux = mazo[a];
    mazo[a] = mazo[b];
    mazo[b] = aux;
}

void mezclarMazo(carta *mazo, int cant) {
    int i;
    srand(time(NULL));
    int limit = rand() % 3;
    int pos;

    for (i = 0; i < limit; i++) {
        pos = rand() % cant;
        swapCartas(mazo, i, pos);
    }
}

void deleteElement (carta *mazo, int *diml, int index) {
    int i;
    (*diml)--;
    for (i = index; i < *diml; i++) mazo[i] = mazo[i + 1];
}

carta takeCarta (carta *mazo, int *diml, int index) {
    carta result;
    result = mazo[index];
    deleteElement(mazo, diml, index);
    return result;
}

int main()
{
  // INICIALIZACION //////
  srand(time(NULL));
  carta mazo[DIMF];
  int diml = DIMF;

  // LOGICA ////////
  llenarMazo(mazo, diml);
  imprimirMazo(mazo, diml);

  mezclarMazo(mazo, diml);
  printf("mazo mezclado //// \n");
  imprimirMazo(mazo, diml);

  int i = rand() % diml;
  printf("saco la carta %d\n", i);
  imprimirCarta(takeCarta(mazo, &diml, i));

  printf("mazo reducido //// \n");
  imprimirMazo(mazo, diml);

  return 0;
}
